# investments/management/commands/check_alerts.py
"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py check_alerts
    python manage.py check_alerts --dry-run
    python manage.py check_alerts --project="Project Name"
    python manage.py check_alerts --email-summary
"""

from django.core.management.base import BaseCommand, CommandError
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from django.template.loader import render_to_string
from django.contrib.auth.models import User
from datetime import datetime, timedelta
import logging

from investments.models import Project
from investments.alerts import AlertManager, AlertAnalyzer
from investments.alerts_models import (
    ProjectAlert, AlertType, AlertSettings, 
    AlertStatistics, AlertRule
)

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Check all projects and generate alerts based on defined rules'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Run checks without creating alerts (preview mode)',
        )
        
        parser.add_argument(
            '--project',
            type=str,
            help='Check specific project by name',
        )
        
        parser.add_argument(
            '--email-summary',
            action='store_true',
            help='Send email summary to administrators',
        )
        
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force check even if recently checked',
        )
        
        parser.add_argument(
            '--type',
            type=str,
            help='Check only specific alert type (IRR_GAP, NAV_DROP, etc)',
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Verbose output',
        )
    
    def handle(self, *args, **options):
        self.dry_run = options.get('dry_run', False)
        self.verbose = options.get('verbose', False)
        self.email_summary = options.get('email_summary', False)
        self.force = options.get('force', False)
        self.specific_project = options.get('project')
        self.specific_type = options.get('type')
        
        start_time = timezone.now()
        
        if self.dry_run:
            self.stdout.write(self.style.WARNING('üîç DRY RUN MODE - No alerts will be created'))
        
        self.stdout.write(self.style.SUCCESS(f'üöÄ Starting alert check at {start_time}'))
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ
            if not self.force and not self.dry_run:
                last_check = self._get_last_check_time()
                if last_check and (timezone.now() - last_check).total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
                    self.stdout.write(self.style.WARNING('‚è≥ Skipping - checked less than 5 minutes ago'))
                    return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            alert_manager = AlertManager()
            analyzer = AlertAnalyzer()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            projects = self._get_projects_to_check()
            
            if not projects:
                self.stdout.write(self.style.WARNING('No projects to check'))
                return
            
            self.stdout.write(f'üìä Checking {len(projects)} projects...')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'projects_checked': 0,
                'alerts_created': 0,
                'critical_alerts': 0,
                'high_alerts': 0,
                'medium_alerts': 0,
                'low_alerts': 0,
                'info_alerts': 0,
                'errors': 0,
                'alerts_by_type': {},
                'alerts_by_project': {}
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
            for project in projects:
                if self.verbose:
                    self.stdout.write(f'  Checking {project.name}...')
                
                try:
                    alerts = self._check_project(project, alert_manager)
                    stats['projects_checked'] += 1
                    
                    for alert in alerts:
                        if not self.dry_run:
                            # –ê–ª–µ—Ä—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ alert_manager
                            pass
                        else:
                            # –í dry-run —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            self._print_alert_preview(alert)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        stats['alerts_created'] += 1
                        severity_key = f"{alert.severity.lower()}_alerts"
                        if severity_key in stats:
                            stats[severity_key] += 1
                        
                        # –ü–æ —Ç–∏–ø–∞–º
                        alert_type = getattr(alert, 'alert_type_code', 'UNKNOWN')
                        stats['alerts_by_type'][alert_type] = stats['alerts_by_type'].get(alert_type, 0) + 1
                        
                        # –ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º
                        stats['alerts_by_project'][project.name] = stats['alerts_by_project'].get(project.name, 0) + 1
                
                except Exception as e:
                    stats['errors'] += 1
                    self.stdout.write(
                        self.style.ERROR(f'  ‚ùå Error checking {project.name}: {str(e)}')
                    )
                    logger.error(f'Error checking project {project.name}: {str(e)}', exc_info=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –µ—Å–ª–∏ –Ω–µ dry-run
            if not self.dry_run:
                self._check_alert_rules(alert_manager, stats)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
            if not self.dry_run:
                self._update_daily_statistics()
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._print_summary(stats)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.email_summary and not self.dry_run:
                self._send_email_summary(stats, analyzer)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not self.dry_run:
                self._save_last_check_time()
            
            end_time = timezone.now()
            duration = (end_time - start_time).total_seconds()
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Alert check completed in {duration:.1f} seconds')
            )
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Fatal error: {str(e)}'))
            logger.error(f'Fatal error in check_alerts: {str(e)}', exc_info=True)
            raise CommandError(f'Alert check failed: {str(e)}')
    
    def _get_projects_to_check(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if self.specific_project:
            try:
                return [Project.objects.get(name=self.specific_project)]
            except Project.DoesNotExist:
                raise CommandError(f'Project "{self.specific_project}" not found')
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            return Project.objects.filter(status='active')
    
    def _check_project(self, project, alert_manager):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç"""
        alerts = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å
        checks_to_run = []
        
        if self.specific_type:
            checks_to_run = [self.specific_type]
        else:
            checks_to_run = [
                'IRR_GAP',
                'NAV_DROP',
                'NPV_NEGATIVE',
                'DATA_QUALITY',
                'DRAWDOWN',
                'DISTRIBUTION',
                'PERFORMANCE'
            ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        for check_type in checks_to_run:
            try:
                if check_type == 'IRR_GAP':
                    alert = alert_manager.check_irr_gap(project)
                    if alert:
                        alert.alert_type_code = 'IRR_GAP'
                        alerts.append(alert)
                
                elif check_type == 'NAV_DROP':
                    alert = alert_manager.check_nav_drop(project)
                    if alert:
                        alert.alert_type_code = 'NAV_DROP'
                        alerts.append(alert)
                
                elif check_type == 'NPV_NEGATIVE':
                    alert = alert_manager.check_npv_negative(project)
                    if alert:
                        alert.alert_type_code = 'NPV_NEGATIVE'
                        alerts.append(alert)
                
                elif check_type == 'DATA_QUALITY':
                    quality_alerts = alert_manager.check_data_quality(project)
                    for alert in quality_alerts:
                        alert.alert_type_code = 'DATA_QUALITY'
                        alerts.append(alert)
                
                elif check_type == 'DRAWDOWN':
                    alert = alert_manager.check_drawdown(project)
                    if alert:
                        alert.alert_type_code = 'DRAWDOWN'
                        alerts.append(alert)
                
                elif check_type == 'DISTRIBUTION':
                    alert = alert_manager.check_distribution_received(project)
                    if alert:
                        alert.alert_type_code = 'DISTRIBUTION'
                        alerts.append(alert)
                
                elif check_type == 'PERFORMANCE':
                    alert = alert_manager.check_performance_milestone(project)
                    if alert:
                        alert.alert_type_code = 'PERFORMANCE'
                        alerts.append(alert)
                
            except Exception as e:
                if self.verbose:
                    self.stdout.write(
                        self.style.WARNING(f'    Warning in {check_type}: {str(e)}')
                    )
                logger.warning(f'Error in {check_type} check for {project.name}: {str(e)}')
        
        return alerts
# –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï check_alerts.py - –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ _check_project
    
    def _check_alert_rules(self, alert_manager, stats):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        rules = AlertRule.objects.filter(is_active=True)
        
        for rule in rules:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                if not self._should_check_rule(rule):
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞
                if rule.applies_to_all_projects:
                    projects = Project.objects.filter(status='active')
                else:
                    projects = rule.specific_projects.filter(status='active')
                
                for project in projects:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                    try:
                        current_value = getattr(project, rule.metric_field, None)
                        if callable(current_value):
                            current_value = current_value()
                    except:
                        continue
                    
                    if current_value is None:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
                    if rule.check_condition(project, current_value):
                        # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
                        severity = rule.severity_override or rule.alert_type.default_severity
                        
                        alert = alert_manager.create_alert(
                            project=project,
                            alert_type_code=rule.alert_type.code,
                            title=f"{rule.name} triggered",
                            message=f"{rule.metric_field} = {current_value} (rule: {rule.operator} {rule.threshold_value})",
                            severity=severity,
                            metric_value=current_value,
                            threshold_value=rule.threshold_value,
                            details={'rule_id': rule.id, 'rule_name': rule.name}
                        )
                        
                        if alert:
                            stats['alerts_created'] += 1
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∞–≤–∏–ª–∞
                            rule.last_triggered = timezone.now()
                            rule.trigger_count += 1
                            rule.save()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                rule.last_checked = timezone.now()
                rule.save()
                
            except Exception as e:
                logger.error(f'Error checking rule {rule.name}: {str(e)}')
    
    def _should_check_rule(self, rule):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É cron —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        if rule.last_checked:
            hours_since_check = (timezone.now() - rule.last_checked).total_seconds() / 3600
            if hours_since_check < 1:
                return False
        return True
    
    def _print_alert_preview(self, alert):
        """–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–≤—å—é –∞–ª–µ—Ä—Ç–∞ –≤ dry-run —Ä–µ–∂–∏–º–µ"""
        icon = 'üö®' if alert.severity == 'CRITICAL' else '‚ö†Ô∏è' if alert.severity == 'HIGH' else '‚ÑπÔ∏è'
        
        self.stdout.write(
            f"    {icon} [{alert.severity}] {alert.title}"
        )
        if self.verbose:
            self.stdout.write(f"       {alert.message}")
            if alert.metric_value is not None:
                self.stdout.write(f"       Metric: {alert.metric_value}")
    
    def _print_summary(self, stats):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('üìä SUMMARY'))
        self.stdout.write('='*50)
        
        self.stdout.write(f"Projects checked: {stats['projects_checked']}")
        self.stdout.write(f"Alerts created: {stats['alerts_created']}")
        
        if stats['alerts_created'] > 0:
            self.stdout.write('\nBy Severity:')
            if stats['critical_alerts'] > 0:
                self.stdout.write(self.style.ERROR(f"  üö® Critical: {stats['critical_alerts']}"))
            if stats['high_alerts'] > 0:
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è  High: {stats['high_alerts']}"))
            if stats['medium_alerts'] > 0:
                self.stdout.write(f"  ‚ö° Medium: {stats['medium_alerts']}")
            if stats['low_alerts'] > 0:
                self.stdout.write(f"  ‚ÑπÔ∏è  Low: {stats['low_alerts']}")
            if stats['info_alerts'] > 0:
                self.stdout.write(f"  üìä Info: {stats['info_alerts']}")
            
            if stats['alerts_by_type']:
                self.stdout.write('\nBy Type:')
                for alert_type, count in sorted(stats['alerts_by_type'].items(), key=lambda x: x[1], reverse=True):
                    self.stdout.write(f"  {alert_type}: {count}")
            
            if stats['alerts_by_project'] and len(stats['alerts_by_project']) <= 10:
                self.stdout.write('\nBy Project:')
                for project, count in sorted(stats['alerts_by_project'].items(), key=lambda x: x[1], reverse=True):
                    self.stdout.write(f"  {project}: {count}")
        
        if stats['errors'] > 0:
            self.stdout.write(self.style.ERROR(f"\n‚ùå Errors: {stats['errors']}"))
        
        self.stdout.write('='*50)
    
    def _send_email_summary(self, stats, analyzer):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = User.objects.filter(is_staff=True, is_active=True, email__isnull=False)
            
            if not admins.exists():
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            portfolio_report = analyzer.generate_portfolio_report()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = {
                'stats': stats,
                'report': portfolio_report,
                'timestamp': timezone.now(),
                'critical_alerts': ProjectAlert.objects.filter(
                    severity='CRITICAL',
                    status__in=['NEW', 'ACKNOWLEDGED']
                ),
                'high_alerts': ProjectAlert.objects.filter(
                    severity='HIGH',
                    status__in=['NEW', 'ACKNOWLEDGED']
                )[:5],
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            try:
                html_content = render_to_string('alerts/email_summary.html', context)
            except:
                # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                html_content = None
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            text_content = f"""
HEDGE FUND TRACKER - Alert Summary
{'='*50}

Check completed at: {timezone.now()}

Projects checked: {stats['projects_checked']}
Alerts created: {stats['alerts_created']}

Critical alerts: {stats['critical_alerts']}
High alerts: {stats['high_alerts']}
Medium alerts: {stats['medium_alerts']}

Portfolio Health Score: {portfolio_report['portfolio_health_score']:.1f}/100

Projects at Risk: {len(portfolio_report['projects_at_risk'])}

{'='*50}
View full dashboard: {getattr(settings, 'SITE_URL', 'http://localhost:8000')}/admin/
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            for admin in admins:
                send_mail(
                    subject=f"[HFT] Alert Summary - {stats['alerts_created']} new alerts",
                    message=text_content,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[admin.email],
                    html_message=html_content,
                    fail_silently=True
                )
            
            self.stdout.write(
                self.style.SUCCESS(f"üìß Email summary sent to {admins.count()} administrators")
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f"Failed to send email summary: {str(e)}")
            )
            logger.error(f"Failed to send email summary: {str(e)}", exc_info=True)
    
    def _update_daily_statistics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è"""
        try:
            today = timezone.now().date()
            AlertStatistics.calculate_for_date(today)
        except Exception as e:
            logger.error(f"Failed to update daily statistics: {str(e)}")
    
    def _get_last_check_time(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            from django.core.cache import cache
            return cache.get('alerts_last_check_time')
        except:
            return None
    
    def _save_last_check_time(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            from django.core.cache import cache
            cache.set('alerts_last_check_time', timezone.now(), 3600)  # –ù–∞ —á–∞—Å
        except:
            pass
