# investments/alerts.py
"""
üö® HEDGE FUND TRACKER - ALERT SYSTEM CORE
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

from datetime import datetime, timedelta, date
from django.utils import timezone
from django.core.mail import send_mail
from django.conf import settings
from typing import Optional, List, Dict, Any
import logging

from .models import Project, Transaction
from .alerts_models import (
    ProjectAlert, AlertType, AlertSettings, 
    AlertLog, AlertRule, AlertStatistics
)

logger = logging.getLogger(__name__)


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏"""
    
    def __init__(self):
        self.severity_weights = {
            'CRITICAL': 5,
            'HIGH': 4,
            'MEDIUM': 3,
            'LOW': 2,
            'INFO': 1
        }
    
    def create_alert(
        self,
        project: Project,
        alert_type_code: str,
        title: str,
        message: str,
        severity: str = 'MEDIUM',
        metric_value: float = None,
        threshold_value: float = None,
        details: Dict = None,
        auto_notify: bool = True
    ) -> ProjectAlert:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞
        try:
            alert_type = AlertType.objects.get(code=alert_type_code)
        except AlertType.DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            alert_type = AlertType.objects.create(
                code=alert_type_code,
                name=alert_type_code.replace('_', ' ').title(),
                description=f"Auto-created alert type: {alert_type_code}",
                default_severity=severity
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–Ω–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)
        recent_duplicate = ProjectAlert.objects.filter(
            project=project,
            alert_type=alert_type,
            title=title,
            status__in=['NEW', 'ACKNOWLEDGED'],
            created_at__gte=timezone.now() - timedelta(hours=1)
        ).first()
        
        if recent_duplicate:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            recent_duplicate.recurrence_count += 1
            recent_duplicate.last_occurrence = timezone.now()
            recent_duplicate.save()
            logger.info(f"Alert duplicate found, incrementing recurrence: {title}")
            return recent_duplicate
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∞ –∏ –ø–æ—Ä–æ–≥
        deviation = None
        if metric_value is not None and threshold_value is not None and threshold_value != 0:
            deviation = ((metric_value - threshold_value) / abs(threshold_value)) * 100
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
        alert = ProjectAlert.objects.create(
            project=project,
            alert_type=alert_type,
            severity=severity or alert_type.default_severity,
            title=title,
            message=message,
            metric_value=metric_value,
            threshold_value=threshold_value,
            deviation=deviation,
            details=details or {},
            created_by='System'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        AlertLog.objects.create(
            alert=alert,
            action='CREATED',
            details=f"Alert created: {title}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if auto_notify:
            self.send_notifications(alert)
        
        logger.info(f"Alert created: {title} for project {project.name}")
        return alert
    
    def check_irr_gap(self, project: Project) -> Optional[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è IRR –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ"""
        if not project.target_irr:
            return None
        
        current_irr = project.get_xirr()
        if current_irr is None:
            return None
        
        gap = current_irr - project.target_irr
        gap_percent = gap * 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º severity –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        if gap_percent < -10:
            severity = 'CRITICAL'
        elif gap_percent < -5:
            severity = 'HIGH'
        elif gap_percent < -2:
            severity = 'MEDIUM'
        else:
            return None  # –ù–µ —Å–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –¥–ª—è –º–∞–ª—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        
        return self.create_alert(
            project=project,
            alert_type_code='IRR_GAP',
            title=f"IRR –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ",
            message=f"–¢–µ–∫—É—â–∏–π IRR {current_irr*100:.2f}% –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ {project.target_irr*100:.2f}% –Ω–∞ {abs(gap_percent):.2f}%",
            severity=severity,
            metric_value=current_irr,
            threshold_value=project.target_irr,
            details={
                'current_irr': current_irr,
                'target_irr': project.target_irr,
                'gap': gap,
                'gap_percent': gap_percent
            }
        )
    
    def check_nav_drop(self, project: Project, lookback_days: int = 7) -> Optional[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è NAV"""
        if project.status != 'active':
            return None
        
        current_nav = project.get_nav()
        if not current_nav:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NAV
        past_date = date.today() - timedelta(days=lookback_days)
        past_transaction = project.transactions.filter(
            date__lte=past_date,
            nav__isnull=False
        ).order_by('-date').first()
        
        if not past_transaction or not past_transaction.nav_usd:
            return None
        
        past_nav = past_transaction.nav_usd
        change_percent = ((current_nav - past_nav) / past_nav) * 100
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
        if change_percent < -10:
            severity = 'CRITICAL'
        elif change_percent < -5:
            severity = 'HIGH'
        elif change_percent < -3:
            severity = 'MEDIUM'
        else:
            return None
        
        return self.create_alert(
            project=project,
            alert_type_code='NAV_DROP',
            title=f"NAV —É–ø–∞–ª –Ω–∞ {abs(change_percent):.1f}% –∑–∞ {lookback_days} –¥–Ω–µ–π",
            message=f"NAV —Å–Ω–∏–∑–∏–ª—Å—è —Å ${past_nav:,.2f} –¥–æ ${current_nav:,.2f}",
            severity=severity,
            metric_value=current_nav,
            threshold_value=past_nav,
            details={
                'current_nav': current_nav,
                'past_nav': past_nav,
                'change_percent': change_percent,
                'period_days': lookback_days
            }
        )
    
    def check_npv_negative(self, project: Project) -> Optional[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ NPV"""
        npv = project.get_xnpv()
        if npv is None or npv >= 0:
            return None
        
        invested = project.get_total_invested()
        npv_percent = (abs(npv) / invested * 100) if invested else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º severity
        if npv_percent > 20:
            severity = 'CRITICAL'
        elif npv_percent > 10:
            severity = 'HIGH'
        else:
            severity = 'MEDIUM'
        
        return self.create_alert(
            project=project,
            alert_type_code='NPV_NEGATIVE',
            title="–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π NPV –ø—Ä–æ–µ–∫—Ç–∞",
            message=f"NPV —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${npv:,.2f} ({npv_percent:.1f}% –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π)",
            severity=severity,
            metric_value=npv,
            threshold_value=0,
            details={
                'npv': npv,
                'invested': invested,
                'npv_percent': npv_percent,
                'target_irr': project.target_irr
            }
        )
    
    def check_data_quality(self, project: Project) -> List[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: DPI > TVPI (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è)
        dpi = project.get_dpi()
        tvpi = project.get_tvpi()
        
        if dpi and tvpi and dpi > tvpi:
            alert = self.create_alert(
                project=project,
                alert_type_code='DATA_QUALITY',
                title="–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: DPI > TVPI",
                message=f"DPI ({dpi:.2f}) –±–æ–ª—å—à–µ TVPI ({tvpi:.2f}), —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ",
                severity='HIGH',
                details={'dpi': dpi, 'tvpi': tvpi}
            )
            alerts.append(alert)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π NAV –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if project.status == 'active':
            last_nav_update = project.transactions.filter(
                nav__isnull=False
            ).order_by('-date').first()
            
            if last_nav_update:
                days_since_update = (date.today() - last_nav_update.date).days
                if days_since_update > 30:
                    alert = self.create_alert(
                        project=project,
                        alert_type_code='DATA_QUALITY',
                        title=f"NAV –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è {days_since_update} –¥–Ω–µ–π",
                        message="–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤",
                        severity='MEDIUM' if days_since_update < 60 else 'HIGH',
                        details={'days_since_update': days_since_update}
                    )
                    alerts.append(alert)
            else:
                # –ù–µ—Ç NAV –≤–æ–æ–±—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                alert = self.create_alert(
                    project=project,
                    alert_type_code='DATA_QUALITY',
                    title="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç NAV –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
                    message="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
                    severity='HIGH'
                )
                alerts.append(alert)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è IRR
        irr = project.get_xirr()
        if irr is not None:
            if irr > 1:  # IRR > 100%
                alert = self.create_alert(
                    project=project,
                    alert_type_code='DATA_QUALITY',
                    title=f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π IRR: {irr*100:.1f}%",
                    message="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö",
                    severity='MEDIUM',
                    metric_value=irr
                )
                alerts.append(alert)
            elif irr < -0.5:  # IRR < -50%
                alert = self.create_alert(
                    project=project,
                    alert_type_code='DATA_QUALITY',
                    title=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π IRR: {irr*100:.1f}%",
                    message="–í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç–µ—Ä—è",
                    severity='HIGH',
                    metric_value=irr
                )
                alerts.append(alert)
        
        return alerts
# –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –§–ê–ô–õ–ê alerts.py - –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ check_data_quality
    
    def check_drawdown(self, project: Project) -> Optional[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏ –æ—Ç –ø–∏–∫–∞"""
        if project.status != 'active':
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è equity/NAV
        transactions = project.transactions.order_by('date')
        values = []
        
        for tx in transactions:
            if tx.nav_usd:
                values.append((tx.date, tx.nav_usd))
            elif tx.equity_usd:
                values.append((tx.date, tx.equity_usd))
        
        if len(values) < 2:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º—É–º –∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        max_value = max(v[1] for v in values)
        current_value = values[-1][1]
        
        if max_value == 0:
            return None
        
        drawdown_percent = ((max_value - current_value) / max_value) * 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º severity
        if drawdown_percent > 20:
            severity = 'CRITICAL'
        elif drawdown_percent > 15:
            severity = 'HIGH'
        elif drawdown_percent > 10:
            severity = 'MEDIUM'
        else:
            return None
        
        return self.create_alert(
            project=project,
            alert_type_code='DRAWDOWN',
            title=f"–ü—Ä–æ—Å–∞–¥–∫–∞ {drawdown_percent:.1f}% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞",
            message=f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–ª–∞ —Å ${max_value:,.2f} –¥–æ ${current_value:,.2f}",
            severity=severity,
            metric_value=current_value,
            threshold_value=max_value,
            details={
                'max_value': max_value,
                'current_value': current_value,
                'drawdown_percent': drawdown_percent
            }
        )
    
    def check_distribution_received(self, project: Project) -> Optional[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        recent_return = project.transactions.filter(
            transaction_type='Return',
            date__gte=date.today() - timedelta(days=7)
        ).order_by('-date').first()
        
        if not recent_return:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –∞–ª–µ—Ä—Ç –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        existing_alert = ProjectAlert.objects.filter(
            project=project,
            alert_type__code='DISTRIBUTION',
            created_at__date=recent_return.date
        ).exists()
        
        if existing_alert:
            return None
        
        return self.create_alert(
            project=project,
            alert_type_code='DISTRIBUTION',
            title=f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${recent_return.return_usd:,.2f}",
            message=f"–ù–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç {recent_return.date}",
            severity='INFO',
            metric_value=recent_return.return_usd,
            details={
                'amount': recent_return.return_usd,
                'date': str(recent_return.date),
                'transaction_id': recent_return.id
            }
        )
    
    def check_performance_milestone(self, project: Project) -> Optional[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ IRR
        if project.target_irr:
            current_irr = project.get_xirr()
            if current_irr and current_irr >= project.target_irr:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–ª–µ—Ä—Ç –Ω–µ–¥–∞–≤–Ω–æ
                recent_alert = ProjectAlert.objects.filter(
                    project=project,
                    alert_type__code='PERFORMANCE',
                    title__contains="–¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–≥–æ IRR",
                    created_at__gte=timezone.now() - timedelta(days=30)
                ).exists()
                
                if not recent_alert:
                    alert = self.create_alert(
                        project=project,
                        alert_type_code='PERFORMANCE',
                        title=f"–ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–≥–æ IRR!",
                        message=f"IRR {current_irr*100:.2f}% –ø—Ä–µ–≤—ã—Å–∏–ª —Ü–µ–ª–µ–≤–æ–π {project.target_irr*100:.2f}%",
                        severity='INFO',
                        metric_value=current_irr,
                        threshold_value=project.target_irr,
                        details={
                            'current_irr': current_irr,
                            'target_irr': project.target_irr,
                            'achievement': 'target_reached'
                        }
                    )
                    alerts.append(alert)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MOIC > 2x
        moic = project.get_moic()
        if moic and moic >= 2.0:
            recent_alert = ProjectAlert.objects.filter(
                project=project,
                alert_type__code='PERFORMANCE',
                title__contains="MOIC –ø—Ä–µ–≤—ã—Å–∏–ª 2x",
                created_at__gte=timezone.now() - timedelta(days=30)
            ).exists()
            
            if not recent_alert:
                alert = self.create_alert(
                    project=project,
                    alert_type_code='PERFORMANCE',
                    title=f"MOIC –ø—Ä–µ–≤—ã—Å–∏–ª 2x!",
                    message=f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–æ—Å—Ç–∏–≥ {moic:.2f}x",
                    severity='INFO',
                    metric_value=moic,
                    threshold_value=2.0,
                    details={'moic': moic, 'achievement': 'moic_2x'}
                )
                alerts.append(alert)
        
        return alerts[0] if alerts else None
    
    def check_all_projects(self) -> List[ProjectAlert]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç—ã"""
        alerts = []
        projects = Project.objects.filter(status='active')
        
        for project in projects:
            # IRR Gap –ø—Ä–æ–≤–µ—Ä–∫–∞
            alert = self.check_irr_gap(project)
            if alert:
                alerts.append(alert)
            
            # NAV Drop –ø—Ä–æ–≤–µ—Ä–∫–∞
            alert = self.check_nav_drop(project)
            if alert:
                alerts.append(alert)
            
            # NPV –ø—Ä–æ–≤–µ—Ä–∫–∞
            alert = self.check_npv_negative(project)
            if alert:
                alerts.append(alert)
            
            # Data Quality –ø—Ä–æ–≤–µ—Ä–∫–∏
            quality_alerts = self.check_data_quality(project)
            alerts.extend(quality_alerts)
            
            # Drawdown –ø—Ä–æ–≤–µ—Ä–∫–∞
            alert = self.check_drawdown(project)
            if alert:
                alerts.append(alert)
            
            # Distribution –ø—Ä–æ–≤–µ—Ä–∫–∞
            alert = self.check_distribution_received(project)
            if alert:
                alerts.append(alert)
            
            # Performance milestones
            alert = self.check_performance_milestone(project)
            if alert:
                alerts.append(alert)
        
        logger.info(f"Alert check completed: {len(alerts)} new alerts created")
        return alerts
    
    def send_notifications(self, alert: ProjectAlert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from django.contrib.auth.models import User
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
        if alert.severity == 'CRITICAL':
            admins = User.objects.filter(is_staff=True, is_active=True)
            for admin in admins:
                self.send_email_notification(admin, alert)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for settings in AlertSettings.objects.filter(email_enabled=True):
            if settings.should_send_notification(alert):
                self.send_email_notification(settings.user, alert)
    
    def send_email_notification(self, user, alert: ProjectAlert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            subject = f"[{alert.get_severity_display()}] {alert.title}"
            
            message = f"""
            {alert.get_severity_icon()} HEDGE FUND TRACKER ALERT
            
            Project: {alert.project.name}
            Type: {alert.alert_type.name}
            Severity: {alert.get_severity_display()}
            
            {alert.message}
            
            {f"Metric Value: {alert.metric_value}" if alert.metric_value else ""}
            {f"Threshold: {alert.threshold_value}" if alert.threshold_value else ""}
            {f"Deviation: {alert.deviation:.1f}%" if alert.deviation else ""}
            
            View details: {settings.SITE_URL}/admin/investments/projectalert/{alert.id}/
            
            ---
            This is an automated message from Hedge Fund Tracker
            """
            
            send_mail(
                subject,
                message,
                settings.DEFAULT_FROM_EMAIL,
                [user.email],
                fail_silently=False,
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
            alert.email_sent = True
            alert.email_sent_at = timezone.now()
            alert.save()
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            AlertLog.objects.create(
                alert=alert,
                action='EMAIL_SENT',
                user=user,
                details=f"Email sent to {user.email}"
            )
            
        except Exception as e:
            logger.error(f"Failed to send email for alert {alert.id}: {str(e)}")
    
    def get_dashboard_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        now = timezone.now()
        today = now.date()
        week_ago = today - timedelta(days=7)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_open = ProjectAlert.objects.filter(
            status__in=['NEW', 'ACKNOWLEDGED', 'IN_PROGRESS']
        ).count()
        
        # –ü–æ severity
        severity_stats = {}
        for severity, _ in ProjectAlert.SEVERITY_CHOICES:
            count = ProjectAlert.objects.filter(
                status__in=['NEW', 'ACKNOWLEDGED', 'IN_PROGRESS'],
                severity=severity
            ).count()
            severity_stats[severity.lower()] = count
        
        # –ù–µ–¥–∞–≤–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã
        recent_alerts = ProjectAlert.objects.filter(
            created_at__gte=now - timedelta(hours=24)
        ).select_related('project', 'alert_type')
        
        # –¢—Ä–µ–Ω–¥—ã
        week_alerts = ProjectAlert.objects.filter(
            created_at__date__gte=week_ago
        )
        
        resolved_week = week_alerts.filter(status='RESOLVED')
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
        avg_resolution = None
        if resolved_week.exists():
            times = [a.resolution_time_hours for a in resolved_week if a.resolution_time_hours]
            if times:
                avg_resolution = sum(times) / len(times)
        
        # –¢–æ–ø –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∞–ª–µ—Ä—Ç–∞–º
        from django.db.models import Count
        top_projects = ProjectAlert.objects.filter(
            status__in=['NEW', 'ACKNOWLEDGED', 'IN_PROGRESS']
        ).values('project__name').annotate(
            alert_count=Count('id')
        ).order_by('-alert_count')[:5]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
        type_distribution = ProjectAlert.objects.filter(
            created_at__date=today
        ).values('alert_type__name').annotate(
            count=Count('id')
        ).order_by('-count')
        
        return {
            'total_open': total_open,
            'severity_stats': severity_stats,
            'recent_alerts': recent_alerts[:10],
            'alerts_today': ProjectAlert.objects.filter(created_at__date=today).count(),
            'alerts_week': week_alerts.count(),
            'resolved_week': resolved_week.count(),
            'avg_resolution_hours': avg_resolution,
            'top_projects': list(top_projects),
            'type_distribution': list(type_distribution),
            'critical_open': severity_stats.get('critical', 0),
            'high_open': severity_stats.get('high', 0),
        }


class AlertAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –∞–ª–µ—Ä—Ç–∞—Ö"""
    
    def analyze_project_health(self, project: Project) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–µ—Ä—Ç–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        cutoff_date = timezone.now() - timedelta(days=30)
        recent_alerts = ProjectAlert.objects.filter(
            project=project,
            created_at__gte=cutoff_date
        )
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ severity
        severity_counts = {}
        for severity, _ in ProjectAlert.SEVERITY_CHOICES:
            severity_counts[severity] = recent_alerts.filter(severity=severity).count()
        
        # –†–∞—Å—á–µ—Ç health score (0-100)
        health_score = 100
        health_score -= severity_counts.get('CRITICAL', 0) * 20
        health_score -= severity_counts.get('HIGH', 0) * 10
        health_score -= severity_counts.get('MEDIUM', 0) * 5
        health_score -= severity_counts.get('LOW', 0) * 2
        health_score = max(0, min(100, health_score))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if health_score >= 80:
            health_status = 'GOOD'
        elif health_score >= 60:
            health_status = 'FAIR'
        elif health_score >= 40:
            health_status = 'POOR'
        else:
            health_status = 'CRITICAL'
        
        # –¢—Ä–µ–Ω–¥—ã
        week_ago = timezone.now() - timedelta(days=7)
        alerts_this_week = recent_alerts.filter(created_at__gte=week_ago).count()
        alerts_last_week = recent_alerts.filter(
            created_at__lt=week_ago,
            created_at__gte=week_ago - timedelta(days=7)
        ).count()
        
        if alerts_last_week > 0:
            trend = ((alerts_this_week - alerts_last_week) / alerts_last_week) * 100
        else:
            trend = 0 if alerts_this_week == 0 else 100
        
        return {
            'health_score': health_score,
            'health_status': health_status,
            'total_alerts_30d': recent_alerts.count(),
            'severity_breakdown': severity_counts,
            'trend_percent': trend,
            'alerts_this_week': alerts_this_week,
            'alerts_last_week': alerts_last_week,
            'unresolved_critical': recent_alerts.filter(
                severity='CRITICAL',
                status__in=['NEW', 'ACKNOWLEDGED']
            ).count(),
            'avg_resolution_time': self._calculate_avg_resolution_time(recent_alerts),
            'most_common_type': self._get_most_common_alert_type(recent_alerts),
        }
    
    def _calculate_avg_resolution_time(self, alerts):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è"""
        resolved = alerts.filter(resolved_at__isnull=False)
        if not resolved.exists():
            return None
        
        times = [a.resolution_time_hours for a in resolved if a.resolution_time_hours]
        return sum(times) / len(times) if times else None
    
    def _get_most_common_alert_type(self, alerts):
        """–ù–∞–π—Ç–∏ —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞"""
        from django.db.models import Count
        
        top_type = alerts.values('alert_type__name').annotate(
            count=Count('id')
        ).order_by('-count').first()
        
        return top_type['alert_type__name'] if top_type else None
    
    def generate_portfolio_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        projects = Project.objects.filter(status='active')
        
        portfolio_health = []
        total_score = 0
        
        for project in projects:
            health = self.analyze_project_health(project)
            portfolio_health.append({
                'project': project.name,
                'health_score': health['health_score'],
                'health_status': health['health_status'],
                'critical_alerts': health['unresolved_critical']
            })
            total_score += health['health_score']
        
        avg_health = total_score / len(portfolio_health) if portfolio_health else 0
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        manager = AlertManager()
        stats = manager.get_dashboard_stats()
        
        return {
            'portfolio_health_score': avg_health,
            'projects_at_risk': [p for p in portfolio_health if p['health_score'] < 60],
            'total_critical_alerts': stats['critical_open'],
            'total_high_alerts': stats['high_open'],
            'projects_health': portfolio_health,
            'dashboard_stats': stats,
            'generated_at': timezone.now()
        }
