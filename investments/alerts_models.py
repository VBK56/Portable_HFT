# investments/alerts_models.py
"""
üöÄ HEDGE FUND TRACKER v4.0 - –°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í
–ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User
from datetime import datetime, timedelta
import json


class AlertType(models.Model):
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    
    TYPE_CHOICES = [
        ('IRR_GAP', 'IRR Gap Alert'),
        ('NAV_DROP', 'NAV Drop Alert'),
        ('NPV_NEGATIVE', 'NPV Negative Alert'),
        ('DATA_QUALITY', 'Data Quality Alert'),
        ('TARGET_MISS', 'Target Miss Alert'),
        ('DRAWDOWN', 'Drawdown Alert'),
        ('SHARPE_DECLINE', 'Sharpe Ratio Decline'),
        ('DISTRIBUTION', 'New Distribution'),
        ('DATE_REMINDER', 'Important Date Reminder'),
        ('PORTFOLIO_RISK', 'Portfolio Risk Alert'),
        ('NO_UPDATE', 'Missing Update Alert'),
        ('PERFORMANCE', 'Performance Alert'),
    ]
    
    code = models.CharField(max_length=50, unique=True, choices=TYPE_CHOICES)
    name = models.CharField(max_length=200)
    description = models.TextField()
    default_severity = models.CharField(
        max_length=20,
        choices=[
            ('CRITICAL', 'Critical'),
            ('HIGH', 'High'),
            ('MEDIUM', 'Medium'),
            ('LOW', 'Low'),
            ('INFO', 'Info')
        ],
        default='MEDIUM'
    )
    check_frequency = models.IntegerField(
        default=1440,  # –º–∏–Ω—É—Ç—ã (24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        help_text="–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö"
    )
    is_active = models.BooleanField(default=True)
    email_template = models.TextField(
        blank=True,
        help_text="–®–∞–±–ª–æ–Ω email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    
    # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    threshold_config = models.JSONField(
        default=dict,
        blank=True,
        help_text="JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['name']
        verbose_name = "Alert Type"
        verbose_name_plural = "Alert Types"
    
    def __str__(self):
        return self.name


class ProjectAlert(models.Model):
    """–ê–ª–µ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    SEVERITY_CHOICES = [
        ('CRITICAL', 'Critical'),
        ('HIGH', 'High'),
        ('MEDIUM', 'Medium'),
        ('LOW', 'Low'),
        ('INFO', 'Info')
    ]
    
    STATUS_CHOICES = [
        ('NEW', 'New'),
        ('ACKNOWLEDGED', 'Acknowledged'),
        ('IN_PROGRESS', 'In Progress'),
        ('RESOLVED', 'Resolved'),
        ('DISMISSED', 'Dismissed'),
        ('ESCALATED', 'Escalated')
    ]
    
    # –°–≤—è–∑–∏
    project = models.ForeignKey(
        'investments.Project',
        on_delete=models.CASCADE,
        related_name='alerts'
    )
    alert_type = models.ForeignKey(
        AlertType,
        on_delete=models.CASCADE,
        related_name='project_alerts'
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    severity = models.CharField(
        max_length=20,
        choices=SEVERITY_CHOICES,
        default='MEDIUM',
        db_index=True
    )
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='NEW',
        db_index=True
    )
    
    # –î–µ—Ç–∞–ª–∏ –∞–ª–µ—Ä—Ç–∞
    title = models.CharField(max_length=300)
    message = models.TextField()
    details = models.JSONField(
        default=dict,
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞ –≤ JSON"
    )
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    metric_value = models.FloatField(
        null=True,
        blank=True,
        help_text="–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –≤—ã–∑–≤–∞–≤—à–µ–π –∞–ª–µ—Ä—Ç"
    )
    threshold_value = models.FloatField(
        null=True,
        blank=True,
        help_text="–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    )
    deviation = models.FloatField(
        null=True,
        blank=True,
        help_text="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã –≤ %"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)
    acknowledged_at = models.DateTimeField(null=True, blank=True)
    resolved_at = models.DateTimeField(null=True, blank=True)
    escalated_at = models.DateTimeField(null=True, blank=True)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    created_by = models.CharField(
        max_length=100,
        default='System',
        help_text="–ö—Ç–æ –∏–ª–∏ —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ –∞–ª–µ—Ä—Ç"
    )
    assigned_to = models.ForeignKey(
        User,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='assigned_alerts'
    )
    resolved_by = models.ForeignKey(
        User,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='resolved_alerts'
    )
    
    # –î–µ–π—Å—Ç–≤–∏—è
    resolution_notes = models.TextField(
        blank=True,
        help_text="–ó–∞–º–µ—Ç–∫–∏ –æ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã"
    )
    actions_taken = models.JSONField(
        default=list,
        blank=True,
        help_text="–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    email_sent = models.BooleanField(default=False)
    email_sent_at = models.DateTimeField(null=True, blank=True)
    push_sent = models.BooleanField(default=False)
    push_sent_at = models.DateTimeField(null=True, blank=True)
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å
    is_recurring = models.BooleanField(
        default=False,
        help_text="–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∞–ª–µ—Ä—Ç"
    )
    recurrence_count = models.IntegerField(
        default=0,
        help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
    )
    last_occurrence = models.DateTimeField(null=True, blank=True)
    
    # –°–≤—è–∑—å —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∞–ª–µ—Ä—Ç–æ–º (–¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)
    parent_alert = models.ForeignKey(
        'self',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='child_alerts'
    )
    
    class Meta:
        ordering = ['-created_at', '-severity']
        verbose_name = "Project Alert"
        verbose_name_plural = "Project Alerts"
        indexes = [
            models.Index(fields=['-created_at', 'status']),
            models.Index(fields=['project', '-created_at']),
            models.Index(fields=['severity', 'status']),
        ]
    
    def __str__(self):
        return f"{self.project.name} - {self.title} ({self.get_severity_display()})"
    
    def acknowledge(self, user=None):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        self.status = 'ACKNOWLEDGED'
        self.acknowledged_at = timezone.now()
        if user:
            self.assigned_to = user
        self.save()
    
    def resolve(self, user=None, notes=""):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∞–ª–µ—Ä—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π"""
        self.status = 'RESOLVED'
        self.resolved_at = timezone.now()
        if user:
            self.resolved_by = user
        if notes:
            self.resolution_notes = notes
        self.save()
    
    def escalate(self):
        """–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç"""
        self.status = 'ESCALATED'
        self.escalated_at = timezone.now()
        if self.severity == 'LOW':
            self.severity = 'MEDIUM'
        elif self.severity == 'MEDIUM':
            self.severity = 'HIGH'
        elif self.severity == 'HIGH':
            self.severity = 'CRITICAL'
        self.save()
    
    def get_severity_color(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è severity"""
        colors = {
            'CRITICAL': '#FF0000',
            'HIGH': '#FF9900',
            'MEDIUM': '#FFCC00',
            'LOW': '#0099FF',
            'INFO': '#999999'
        }
        return colors.get(self.severity, '#666666')
    
    def get_severity_icon(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è severity"""
        icons = {
            'CRITICAL': 'üö®',
            'HIGH': '‚ö†Ô∏è',
            'MEDIUM': '‚ö°',
            'LOW': '‚ÑπÔ∏è',
            'INFO': 'üìä'
        }
        return icons.get(self.severity, '‚ùì')
    
    @property
    def is_open(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∞–ª–µ—Ä—Ç"""
        return self.status not in ['RESOLVED', 'DISMISSED']
    
    @property
    def age_days(self):
        """–í–æ–∑—Ä–∞—Å—Ç –∞–ª–µ—Ä—Ç–∞ –≤ –¥–Ω—è—Ö"""
        if self.resolved_at:
            delta = self.resolved_at - self.created_at
        else:
            delta = timezone.now() - self.created_at
        return delta.days
    
    @property
    def response_time_hours(self):
        """–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö"""
        if self.acknowledged_at:
            delta = self.acknowledged_at - self.created_at
            return round(delta.total_seconds() / 3600, 1)
        return None
    
    @property
    def resolution_time_hours(self):
        """–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö"""
        if self.resolved_at:
            delta = self.resolved_at - self.created_at
            return round(delta.total_seconds() / 3600, 1)
        return None


class AlertSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name='alert_settings'
    )
    
    # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    email_enabled = models.BooleanField(default=True)
    email_frequency = models.CharField(
        max_length=20,
        choices=[
            ('IMMEDIATE', 'Immediate'),
            ('HOURLY', 'Hourly'),
            ('DAILY', 'Daily'),
            ('WEEKLY', 'Weekly')
        ],
        default='IMMEDIATE'
    )
    email_digest_time = models.TimeField(
        null=True,
        blank=True,
        help_text="–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"
    )
    
    # Push –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    push_enabled = models.BooleanField(default=False)
    push_token = models.TextField(
        blank=True,
        help_text="FCM/APNs —Ç–æ–∫–µ–Ω –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    
    # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
    subscribed_types = models.ManyToManyField(
        AlertType,
        blank=True,
        related_name='subscribers'
    )
    
    # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã
    subscribed_projects = models.ManyToManyField(
        'investments.Project',
        blank=True,
        related_name='alert_subscribers'
    )
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ severity
    min_severity = models.CharField(
        max_length=20,
        choices=ProjectAlert.SEVERITY_CHOICES,
        default='LOW',
        help_text="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    
    # Quiet hours
    quiet_hours_enabled = models.BooleanField(default=False)
    quiet_hours_start = models.TimeField(null=True, blank=True)
    quiet_hours_end = models.TimeField(null=True, blank=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    weekend_notifications = models.BooleanField(default=False)
    vacation_mode = models.BooleanField(default=False)
    vacation_mode_until = models.DateTimeField(null=True, blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Alert Settings"
        verbose_name_plural = "Alert Settings"
    
    def __str__(self):
        return f"Alert Settings for {self.user.username}"
    
    def should_send_notification(self, alert):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # Vacation mode
        if self.vacation_mode:
            if self.vacation_mode_until and timezone.now() > self.vacation_mode_until:
                self.vacation_mode = False
                self.save()
            else:
                return False
        
        # Check severity
        severity_levels = ['INFO', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']
        alert_level = severity_levels.index(alert.severity)
        min_level = severity_levels.index(self.min_severity)
        if alert_level < min_level:
            return False
        
        # Check quiet hours
        if self.quiet_hours_enabled:
            now = timezone.now().time()
            if self.quiet_hours_start <= now <= self.quiet_hours_end:
                return False
        
        # Check weekend
        if not self.weekend_notifications:
            if timezone.now().weekday() in [5, 6]:  # Saturday, Sunday
                return False
        
        # Check subscriptions
        if self.subscribed_types.exists():
            if alert.alert_type not in self.subscribed_types.all():
                return False
        
        if self.subscribed_projects.exists():
            if alert.project not in self.subscribed_projects.all():
                return False
        
        return True


class AlertLog(models.Model):
    """–õ–æ–≥ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–ª–µ—Ä—Ç–∞–º–∏"""
    
    ACTION_CHOICES = [
        ('CREATED', 'Alert Created'),
        ('ACKNOWLEDGED', 'Alert Acknowledged'),
        ('ASSIGNED', 'Alert Assigned'),
        ('ESCALATED', 'Alert Escalated'),
        ('RESOLVED', 'Alert Resolved'),
        ('DISMISSED', 'Alert Dismissed'),
        ('EMAIL_SENT', 'Email Sent'),
        ('PUSH_SENT', 'Push Sent'),
        ('COMMENT_ADDED', 'Comment Added'),
        ('STATUS_CHANGED', 'Status Changed'),
        ('SEVERITY_CHANGED', 'Severity Changed'),
    ]
    
    alert = models.ForeignKey(
        ProjectAlert,
        on_delete=models.CASCADE,
        related_name='logs'
    )
    action = models.CharField(max_length=50, choices=ACTION_CHOICES)
    user = models.ForeignKey(
        User,
        null=True,
        blank=True,
        on_delete=models.SET_NULL
    )
    details = models.TextField(blank=True)
    old_value = models.CharField(max_length=255, blank=True)
    new_value = models.CharField(max_length=255, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = "Alert Log"
        verbose_name_plural = "Alert Logs"
    
    def __str__(self):
        return f"{self.alert.title} - {self.get_action_display()} at {self.created_at}"


class AlertRule(models.Model):
    """–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    name = models.CharField(max_length=200)
    description = models.TextField()
    alert_type = models.ForeignKey(AlertType, on_delete=models.CASCADE)
    
    # –£—Å–ª–æ–≤–∏—è –ø—Ä–∞–≤–∏–ª–∞
    condition_type = models.CharField(
        max_length=50,
        choices=[
            ('THRESHOLD', 'Threshold'),
            ('CHANGE', 'Change'),
            ('TREND', 'Trend'),
            ('COMPARISON', 'Comparison'),
            ('TIME_BASED', 'Time Based'),
            ('CUSTOM', 'Custom')
        ]
    )
    
    # –ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    metric_field = models.CharField(
        max_length=100,
        help_text="–ü–æ–ª–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'irr', 'nav')"
    )
    
    # –£—Å–ª–æ–≤–∏—è
    operator = models.CharField(
        max_length=20,
        choices=[
            ('GT', 'Greater Than'),
            ('GTE', 'Greater Than or Equal'),
            ('LT', 'Less Than'),
            ('LTE', 'Less Than or Equal'),
            ('EQ', 'Equal'),
            ('NEQ', 'Not Equal'),
            ('CHANGE_GT', 'Change Greater Than'),
            ('CHANGE_LT', 'Change Less Than'),
        ]
    )
    
    threshold_value = models.FloatField(
        null=True,
        blank=True,
        help_text="–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    lookback_days = models.IntegerField(
        default=1,
        help_text="–ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥–Ω–∏)"
    )
    
    min_occurrences = models.IntegerField(
        default=1,
        help_text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ severity
    severity_override = models.CharField(
        max_length=20,
        choices=ProjectAlert.SEVERITY_CHOICES,
        null=True,
        blank=True,
        help_text="–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å severity –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞"
    )
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = models.BooleanField(default=True)
    applies_to_all_projects = models.BooleanField(default=True)
    specific_projects = models.ManyToManyField(
        'investments.Project',
        blank=True,
        related_name='alert_rules'
    )
    
    # Custom Python –∫–æ–¥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
    custom_condition = models.TextField(
        blank=True,
        help_text="Python –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    )
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_schedule = models.CharField(
        max_length=100,
        default='0 */1 * * *',  # –ö–∞–∂–¥—ã–π —á–∞—Å
        help_text="Cron expression –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫"
    )
    
    last_checked = models.DateTimeField(null=True, blank=True)
    last_triggered = models.DateTimeField(null=True, blank=True)
    trigger_count = models.IntegerField(default=0)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['name']
        verbose_name = "Alert Rule"
        verbose_name_plural = "Alert Rules"
    
    def __str__(self):
        return f"{self.name} ({self.alert_type.name})"
    
    def check_condition(self, project, current_value):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        if self.condition_type == 'CUSTOM' and self.custom_condition:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å custom –∫–æ–¥
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                local_vars = {
                    'project': project,
                    'value': current_value,
                    'threshold': self.threshold_value
                }
                exec(self.custom_condition, {"__builtins__": {}}, local_vars)
                return local_vars.get('result', False)
            except Exception as e:
                print(f"Error in custom condition: {e}")
                return False
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.operator == 'GT':
            return current_value > self.threshold_value
        elif self.operator == 'GTE':
            return current_value >= self.threshold_value
        elif self.operator == 'LT':
            return current_value < self.threshold_value
        elif self.operator == 'LTE':
            return current_value <= self.threshold_value
        elif self.operator == 'EQ':
            return current_value == self.threshold_value
        elif self.operator == 'NEQ':
            return current_value != self.threshold_value
        
        return False


class AlertStatistics(models.Model):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–ª–µ—Ä—Ç–∞–º –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    date = models.DateField(unique=True)
    
    # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ severity
    critical_count = models.IntegerField(default=0)
    high_count = models.IntegerField(default=0)
    medium_count = models.IntegerField(default=0)
    low_count = models.IntegerField(default=0)
    info_count = models.IntegerField(default=0)
    
    # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    new_count = models.IntegerField(default=0)
    acknowledged_count = models.IntegerField(default=0)
    resolved_count = models.IntegerField(default=0)
    dismissed_count = models.IntegerField(default=0)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    avg_response_time = models.FloatField(
        null=True,
        blank=True,
        help_text="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö"
    )
    avg_resolution_time = models.FloatField(
        null=True,
        blank=True,
        help_text="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö"
    )
    
    # Top –∞–ª–µ—Ä—Ç—ã
    top_projects = models.JSONField(
        default=list,
        blank=True,
        help_text="–¢–æ–ø –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–ª–µ—Ä—Ç–æ–≤"
    )
    top_types = models.JSONField(
        default=list,
        blank=True,
        help_text="–¢–æ–ø —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-date']
        verbose_name = "Alert Statistics"
        verbose_name_plural = "Alert Statistics"
    
    def __str__(self):
        return f"Alert Statistics for {self.date}"
    
    @classmethod
    def calculate_for_date(cls, date):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        from django.db.models import Count, Avg
        
        alerts = ProjectAlert.objects.filter(
            created_at__date=date
        )
        
        stats, created = cls.objects.get_or_create(date=date)
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ severity
        severity_counts = alerts.values('severity').annotate(count=Count('id'))
        for item in severity_counts:
            setattr(stats, f"{item['severity'].lower()}_count", item['count'])
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É  
        status_counts = alerts.values('status').annotate(count=Count('id'))
        for item in status_counts:
            setattr(stats, f"{item['status'].lower()}_count", item['count'])
        
        # –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞
        resolved_alerts = alerts.filter(resolved_at__isnull=False)
        if resolved_alerts.exists():
            times = []
            for alert in resolved_alerts:
                if alert.resolution_time_hours:
                    times.append(alert.resolution_time_hours)
            if times:
                stats.avg_resolution_time = sum(times) / len(times)
        
        # Top –ø—Ä–æ–µ–∫—Ç—ã
        top_projects = alerts.values('project__name').annotate(
            count=Count('id')
        ).order_by('-count')[:5]
        stats.top_projects = list(top_projects)
        
        # Top —Ç–∏–ø—ã
        top_types = alerts.values('alert_type__name').annotate(
            count=Count('id')
        ).order_by('-count')[:5]
        stats.top_types = list(top_types)
        
        stats.save()
        return stats