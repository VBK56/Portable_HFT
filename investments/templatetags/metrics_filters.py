from django import template
from django.utils.safestring import mark_safe

register = template.Library()

@register.filter
def metric_format(value, fmt_type):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    {{ value|metric_format:"currency" }}     -> $12,345.67
    {{ value|metric_format:"percentage" }}   -> 12.50%
    {{ value|metric_format:"multiple" }}     -> 1.25x
    {{ value|metric_format:"decimal" }}      -> 1.25
    """
    if value is None:
        return "-"
    
    try:
        float_value = float(value)
        
        if fmt_type == "currency":
            return f"${float_value:,.2f}"
        elif fmt_type == "percentage":
            return f"{float_value * 100:.2f}%"
        elif fmt_type == "multiple":
            return f"{float_value:.2f}x"
        elif fmt_type == "decimal":
            return f"{float_value:.2f}"
        else:
            return str(value)
    except (ValueError, TypeError):
        return "-"

@register.filter
def format_currency(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞–∫ –≤–∞–ª—é—Ç—É —Å —Å–∏–º–≤–æ–ª–æ–º $"""
    if value is None:
        return "-"
    try:
        return f"${float(value):,.2f}"
    except:
        return "-"

@register.filter
def format_percentage(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç —Å 2 –∑–Ω–∞–∫–∞–º–∏"""
    if value is None:
        return "-"
    try:
        return f"{float(value) * 100:.2f}%"
    except:
        return "-"

@register.filter
def format_multiple(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å 'x'"""
    if value is None:
        return "-"
    try:
        return f"{float(value):.2f}x"
    except:
        return "-"

# üîß –ù–û–í–´–ï –ü–†–û–°–¢–´–ï –§–ò–õ–¨–¢–†–´ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
@register.filter
def currency(value):
    """–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤–∞–ª—é—Ç –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ $ (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å $ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ)"""
    if value is None or value == 0:
        return "-"
    try:
        return f"{float(value):,.2f}"
    except:
        return "-"

@register.filter
def multiple(value):
    """–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ x (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å x –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ)"""
    if value is None or value == 0:
        return "-"
    try:
        return f"{float(value):.2f}"
    except:
        return "-"

# üîß –ù–û–í–´–ô –§–ò–õ–¨–¢–† –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ë–ï–ó —Å–∏–º–≤–æ–ª–∞ %
@register.filter
def percentage_value(value):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç 0.2267 –≤ 22.67 (–ë–ï–ó —Å–∏–º–≤–æ–ª–∞ % –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å % –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ)"""
    if value is None:
        return "-"
    try:
        return f"{float(value) * 100:.2f}"
    except:
        return "-"

@register.filter
def safe_call(value):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ value —è–≤–ª—è–µ—Ç—Å—è callable"""
    try:
        return value() if callable(value) else value
    except:
        return "-"

@register.filter
def default_if_none(value, default="-"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç default –µ—Å–ª–∏ value None"""
    return default if value is None else value

@register.simple_tag
def format_metric(value, metric_type):
    """
    –¢–µ–≥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    {% format_metric project.xirr "xirr" %}
    {% format_metric project.total_invested "currency" %}
    """
    if value is None:
        return mark_safe("-")
    
    try:
        float_value = float(value)
        
        if metric_type in ["xirr", "target_irr", "gap_to_target_irr", "percentage"]:
            return mark_safe(f"{float_value * 100:.2f}%")
        elif metric_type in ["dpi", "tvpi", "multiple"]:
            return mark_safe(f"{float_value:.2f}x")
        elif metric_type in ["currency", "invested", "returned", "nav", "xnpv", "estimated_return"]:
            return mark_safe(f"${float_value:,.2f}")
        else:
            return mark_safe(f"{float_value:.2f}")
    except (ValueError, TypeError):
        return mark_safe("-")